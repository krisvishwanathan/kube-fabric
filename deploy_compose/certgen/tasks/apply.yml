---
- name: Setup few variables
  set_fact:
    network: "{{ fabric.network }}"
    fabricworkdir: "/opt/gopath/fabric"
    gopath: "/opt/gopath"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas }}"
    peerls: "{{ peerls | default([]) + item.value.peers }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers }}"
    kafkals: "{{ kafkasls | default([]) + item.value.kafkas }}"
  with_dict: "{{ fabric.network }}"

- name: Get ca object list
  set_fact:
    cas: |
      {{ cas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item.split('.')[:-1] | join('.') }] }}
  with_items: "{{ cals }}"

- name: Sort the ca list
  set_fact:
    cas: "{{ cas | sort(attribute='org') }}"

- name: Get peer object list
  set_fact:
    peers: |
      {{ peers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1].split('.')[:-1] | join('.'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Sort the peer list
  set_fact:
    peers: "{{ peers | sort(attribute='org') }}"

- name: Get orderer object list
  set_fact:
    orderers: |
      {{ orderers | default([]) + [{'org':item.split('.')[-1],
        'name':item.split('.')[:-1] | join('.') }] }}
  with_items: "{{ ordererls }}"

- name: Sort the orderer list
  set_fact:
    orderers: "{{ orderers | sort(attribute='org') }}"

- name: Ensure certificate directory is clean
  file:
    path: "{{ fabricworkdir }}/keyfiles"
    state: absent
  with_items:
    - "absent"
    - "directory"

- name: Create organization certificate directories
  file:
    path: "{{ fabricworkdir }}/keyfiles/{{ item.org }}"
    state: directory
  with_items: "{{ cas }}"

- name: Create organization CA certificates
  shell: >-
    mkdir -p ca msp/admincerts msp/cacerts msp/keystore msp/signcerts &&
    mkdir -p users/Admin@{{ item.org }}/msp/admincerts &&
    mkdir -p users/Admin@{{ item.org }}/msp/cacerts &&
    mkdir -p users/Admin@{{ item.org }}/msp/keystore &&
    mkdir -p users/Admin@{{ item.org }}/msp/signcerts &&
    mkdir -p users/Admin@{{ item.org }}/tls &&
    openssl ecparam -genkey -name prime256v1 -noout -out {{ item.org }}.key &&
    openssl pkcs8 -topk8 -nocrypt -in {{ item.org }}.key -out {{ item.org }}.sk &&
    openssl req -x509 -new -SHA384 -nodes -key {{ item.org }}.sk -days 1000
    -out {{ item.org }}.crt
    -subj "/C=US/ST=NC/L=Cary/O={{ item.org }}/CN={{ item.name }}.{{ item.org }}" &&
    openssl ecparam -genkey -name prime256v1 -noout -out Admin.{{ item.org }}.key &&
    openssl pkcs8 -topk8 -nocrypt -in Admin.{{ item.org }}.key
    -out Admin.{{ item.org }}.sk &&
    openssl req -new -SHA384 -key Admin.{{ item.org }}.sk -nodes
    -out Admin.{{ item.org }}.csr
    -subj "/C=US/ST=NC/L=Cary/O={{ item.org }}/CN=Admin.{{ item.org }}" &&
    openssl x509 -req -SHA384 -days 1000 -in Admin.{{ item.org }}.csr
    -CA {{ item.org }}.crt -CAkey {{ item.org }}.sk
    -CAcreateserial -out Admin.{{ item.org }}.crt &&
    cp {{ item.org }}.sk ca && cp {{ item.org }}.crt ca &&
    cp Admin.{{ item.org }}.crt msp/admincerts &&
    cp {{ item.org }}.crt msp/cacerts &&
    cp {{ item.org }}.crt msp/signcerts &&
    cp {{ item.org }}.crt users/Admin@{{ item.org }}/msp/admincerts &&
    cp {{ item.org }}.crt users/Admin@{{ item.org }}/msp/cacerts &&
    cp Admin.{{ item.org }}.crt users/Admin@{{ item.org }}/msp/signcerts &&
    cp {{ item.org }}.crt users/Admin@{{ item.org }}/tls &&
    openssl ecparam -genkey -name prime256v1 -noout -out {{ item.org }}.tls.key &&
    openssl pkcs8 -topk8 -nocrypt -in {{ item.org }}.tls.key -out {{ item.org }}.tls.sk &&
    cp {{ item.org }}.tls.sk users/Admin@{{ item.org }}/msp/keystore/server.sk &&
    cp {{ item.org }}.tls.sk users/Admin@{{ item.org }}/tls/server.sk &&
    openssl req -new -SHA384 -key {{ item.org }}.tls.sk -nodes
    -out {{ item.org }}.tls.csr
    -subj "/C=US/ST=NC/L=Cary/O={{ item.org }}/CN=Admin.{{ item.org }}" &&
    openssl x509 -req -SHA384 -days 1000 -in {{ item.org }}.tls.csr
    -CA {{ item.org }}.crt -CAkey {{ item.org }}.sk
    -CAcreateserial -out users/Admin@{{ item.org }}/tls/server.crt && rm *.key
  args:
    chdir: "{{ fabricworkdir }}/keyfiles/{{ item.org }}"
  with_items: "{{ cas }}"

- name: Create certificate directories for orders and peers
  file:
    path: "{{ fabricworkdir }}/keyfiles/{{ item.org }}/{{ item.name}}"
    state: directory
  with_items:
    - "{{ peers }}"
    - "{{ orderers }}"

- name: Create certificate for orders and peers
  shell: >-
    mkdir -p tls msp/admincerts msp/cacerts msp/keystore msp/signcerts &&
    openssl ecparam -genkey -name prime256v1 -noout -out {{ item.name }}.{{ item.org }}.key &&
    openssl pkcs8 -topk8 -nocrypt -in {{ item.name }}.{{ item.org }}.key
    -out {{ item.name }}.{{ item.org }}.sk &&
    openssl req -new -SHA384 -key {{ item.name }}.{{ item.org }}.sk -nodes
    -out {{ item.name }}.{{ item.org }}.csr
    -subj "/C=US/ST=NC/L=Cary/O={{ item.org }}/CN={{ item.name }}.{{ item.org }}" &&
    openssl x509 -req -SHA384 -days 1000 -in {{ item.name }}.{{ item.org }}.csr
    -CA ../{{ item.org }}.crt -CAkey ../{{ item.org }}.sk
    -CAcreateserial -out {{ item.name }}.{{ item.org }}.crt &&
    openssl ecparam -genkey -name prime256v1 -noout -out {{ item.name }}.{{ item.org }}.tls.key &&
    openssl pkcs8 -topk8 -nocrypt -in {{ item.name }}.{{ item.org }}.tls.key
    -out {{ item.name }}.{{ item.org }}.tls.sk &&
    openssl req -new -SHA384 -key {{ item.name }}.{{ item.org }}.tls.sk -nodes
    -out {{ item.name }}.{{ item.org }}.tls.csr
    -subj "/C=US/ST=NC/L=Cary/O={{ item.org }}/CN=tls.{{ item.name }}.{{ item.org }}" &&
    openssl x509 -req -SHA384 -days 1000 -in {{ item.name }}.{{ item.org }}.tls.csr
    -CA ../{{ item.org }}.crt -CAkey ../{{ item.org }}.sk
    -CAcreateserial -out {{ item.name }}.{{ item.org }}.tls.crt && rm *.key &&
    cp ../Admin.{{ item.org }}.crt msp/admincerts &&
    cp ../{{ item.org }}.crt msp/cacerts &&
    mv {{ item.name }}.{{ item.org }}.sk msp/keystore &&
    mv {{ item.name }}.{{ item.org }}.crt msp/signcerts &&
    cp ../{{ item.org }}.crt tls/{{ item.org }}.crt &&
    mv {{ item.name }}.{{ item.org }}.tls.sk tls/server.key &&
    mv {{ item.name }}.{{ item.org }}.tls.crt tls/server.crt &&
    rm -f *.crt *.sk *.csr *.srl
  args:
    chdir: "{{ fabricworkdir }}/keyfiles/{{ item.org }}/{{ item.name }}"
  with_items:
    - "{{ peers }}"
    - "{{ orderers }}"

- name: Remove temp files created during the process
  shell: rm -f *.crt *.sk *.csr *.srl
  args:
    chdir: "{{ fabricworkdir }}/keyfiles/{{ item.org }}"
  with_items: "{{ cas }}"

- name: Create a zip file of all certificates
  archive:
    path: "{{ fabricworkdir }}/keyfiles"
    dest: "{{ fabricworkdir }}/certs.tgz"