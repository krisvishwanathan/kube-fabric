---
- name: Figuring out the server architecture
  shell: uname -m
  register: rawarch

- name: Setup and initialize variables
  set_fact:
    current_host: "{{ hostvars[inventory_hostname].inter_name }}"
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    gopath: "/opt/gopath/{{ env }}"
    arch: "{{ rawarch.stdout}}"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    cas: "{{ [] }}"
    cakeys: "{{ {} }}"
    kafkas: "{{ [] }}"
    kafkanodes: ""
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"
    zookeeperls: "{{ [] }}"
    kafkals: "{{ [] }}"
    peerls: "{{ [] }}"
    ordererls: "{{ [] }}"
    cals: "{{ [] }}"
    allpeers: "{{ [] }}"
    clihost: ""
    thetag: "{{ rawarch.stdout + '-' + fabric.baseimage_tag }}"
    catag: "{{ rawarch.stdout + '-' + fabric.ca.tag }}"
    filterstr: ""
    k8s_server: "{{ hostvars[groups['allnodes'][0]].private_ip }}"

- name: Make sure that working directory exists and clean
  file:
    path: "{{ fabricworkdir }}/run"
    state: "{{ item }}"
    mode: 0775
  with_items:
    - "absent"
    - "directory"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    zookeeperls: "{{ zookeeperls | default([]) + item.value.zookeepers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Sort component list
  set_fact:
    zookeeperls: "{{ zookeeperls | sort }}"
    kafkals: "{{ kafkals | sort }}"

- name: Generate zookeeper node list
  set_fact:
    znodes: "{{ znodes }} server.{{ index }}={{ item }}:2888:3888"
    zkparam: "{{ zkparam + item }}:2181 "
    zoo_ids: "{{ zoo_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ zookeeperls | default([]) }}"

- name: Reset the index
  set_fact:
    index: 1

- name: Generate kafka broker ids
  set_fact:
    kafka_ids: "{{ kafka_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ kafkals | default([]) }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ cals }}"

- name: Get all orderer object list
  set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ ordererls }}"

- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[current_host].peers | default([]) }}"

- name: Get ca container list
  set_fact:
    cas: |
      {{ cas + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ fabric.network[current_host].cas | default([]) }}"

- name: Get orderer container list
  set_fact:
    orderers: |
      {{ orderers + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ fabric.network[current_host].orderers | default([]) }}"

- name: Set zookeeper and kafka container list
  set_fact:
    zookeepers: "{{ fabric.network[current_host].zookeepers | default([]) }}"
    kafkas: "{{ fabric.network[current_host].kafkas | default([]) }}"

- name: Pull certificates from the builder machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/certs.tgz"
    "{{ fabricworkdir }}/allcerts.tgz"

- name: Pull container images from the builder machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/images/fabricimages.tar"
    "{{ fabricworkdir }}/fabricimages.tar"
  when: fabric.baseimage_tag == ''

- name: Pull container version file from the build machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/images/VERSION"
    "{{ fabricworkdir }}/VERSION"
  when: fabric.baseimage_tag == ''

- name: Load all the docker images created by build machine
  shell: >-
    docker load -i {{ fabricworkdir }}/fabricimages.tar
  when: fabric.baseimage_tag == ''

- name: Find out the image tags
  slurp:
    src: "{{ fabricworkdir }}/VERSION"
  register: project_version
  when: fabric.baseimage_tag == ''

- name: Set the container tag
  set_fact:
    thetag: "{{ arch + '-' + (project_version['content'] | b64decode) }}"
  when: fabric.baseimage_tag == ''

- name: Unpack the certificates
  unarchive:
    src: "{{ fabricworkdir }}/allcerts.tgz"
    dest: "{{ fabricworkdir }}/run"
    remote_src: true

- name: Process private key files
  find:
    paths: "{{ fabricworkdir }}/run/keyfiles/{{ item[0].org }}/{{ item[1] }}"
    patterns: "*_sk"
    recurse: yes
  with_nested:
    - "{{ cas }}"
    - ["ca", "tlsca"]
  when: cas | length > 0
  register: privatekeys

- name: Process private key files
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/fabric-ca-server-config.j2"
    dest: "{{ fabricworkdir }}/run/keyfiles/{{ item.org }}/ca/fabric-ca-server-config.yaml"
  with_items: "{{ cas }}"

- name: Setup ca private key values
  set_fact:
    cakeys: |
      {{ cakeys | combine( {item.item[0].org+'_'+item.item[1]: item.files[0].path.split('/')[-1] } ) }}
  with_items: "{{ privatekeys.results }}"
  no_log: True

- name: Get the peer org list
  set_fact:
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"

- name: Get all peer orgs
  set_fact:
    orgmembers: "{{ peers | map(attribute='org') | list  | unique | sort | join(\".member' '\") | trim | replace(' ', ',') }}"

- name: Create k8s deployment files
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/fabric-pod.j2"
    dest: "{{ fabricworkdir }}/run/fabric-pod.yml"

- name: Get pod filter string from peers and orderes
  set_fact:
    filterstr : "{{ filterstr + ' -e k8s_' + item.name }}"
  with_items:
    - "{{ peers }}"
    - "{{ orderers }}"

- name: Get pod filter string from zookeepers and kafkas
  set_fact:
    filterstr : "{{ filterstr + ' -e k8s_' + item }}"
  with_items:
    - "{{ zookeepers }}"
    - "{{ kafkas }}"
    - "fabriccli"

- name: Pull container images from the docker hub
  command: "docker pull {{ item }}"
  when: fabric.baseimage_tag | length > 0
  with_items:
    - "hyperledger/fabric-ca:{{ thetag }}"
    - "hyperledger/fabric-tools:{{ thetag }}"
    - "hyperledger/fabric-ccenv:{{ thetag }}"
    - "hyperledger/fabric-kafka:{{ thetag }}"
    - "hyperledger/fabric-zookeeper:{{ thetag }}"
    - "hyperledger/fabric-peer:{{ thetag }}"
    - "hyperledger/fabric-orderer:{{ thetag }}"
    - "hyperledger/fabric-couchdb:{{ thetag }}"

- name: Start fabric pods
  command: "/opt/fabric/bin/kubectl --server {{ k8s_server }}:8080 create -f {{ fabricworkdir }}/run/fabric-pod.yml"
  tags: "fabricup"

- name: Locate a host to run peer channel create command
  set_fact:
    clihost: "{{ item }}"
    clipeer: "{{ allpeers | random }}"
    cliorderer: "{{ allorderers | random }}"
  when: peers | length > 0 and clihost == ""
  with_items: "{{ groups['allnodes'] }}"

- name: Make sure that working directory exists and clean
  file:
    path: "{{ fabricworkdir }}/run/keyfiles/chaincode"
    state: "directory"
    mode: 0775
  when: clihost == inventory_hostname

- name: Move chaincode to the server
  copy:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/firstcode.go"
    dest: "{{ fabricworkdir }}/run/keyfiles/chaincode/firstcode.go"
    mode: "u=rw,g=rw"
  when: clihost == inventory_hostname

- name: Create peer channel command script
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/dochannel.j2"
    dest: "{{ fabricworkdir }}/run/keyfiles/dochannel.sh"
    mode: "u=rx,g=rx"
  when: clihost == inventory_hostname

- name: Create peer channel command k8s deployment file
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/cli-k8s.j2"
    dest: "{{ fabricworkdir }}/run/cli-k8s.yml"
  when: clihost == inventory_hostname

- name: Wait for containers to be ready
  pause:
    seconds: 30

- name: Start fabriccli pod
  command: >-
    /opt/fabric/bin/kubectl --server {{ k8s_server }}:8080 create
    -f {{ fabricworkdir }}/run/cli-k8s.yml
  when: clihost == inventory_hostname
  tags: "cliup"
